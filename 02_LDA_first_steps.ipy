#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Nov 28 14:04:06 2020

@author: simonwanka
"""
import pandas as pd 

from sklearn.feature_extraction.text import CountVectorizer
import numpy as np

import matplotlib
import matplotlib.backends 
import matplotlib.pyplot as plt

import seaborn as sns

sns.set_style('whitegrid') 
%matplotlib inline

df = pd.read_csv("megadata_csv.csv")
print(df)

# Helper function
def plot_10_most_common_words(count_data, count_vectorizer):
    import matplotlib.pyplot as plt
    words = count_vectorizer.get_feature_names()
    total_counts = np.zeros(len(words))
    for t in count_data:
        total_counts+=t.toarray()[0]
    
    count_dict = (zip(words, total_counts))
    count_dict = sorted(count_dict, key=lambda x:x[1], reverse=True)[0:10]
    words = [w[0] for w in count_dict]
    counts = [w[1] for w in count_dict]
    x_pos = np.arange(len(words)) 
    
    plt.figure(2, figsize=(15, 15/1.6180))
    plt.subplot(title='10 most common words across the spectrums')
    sns.set_context("notebook", font_scale=1.25, rc={"lines.linewidth": 2.5})
    sns.barplot(x_pos, counts, palette='husl')
    plt.xticks(x_pos, words, rotation=90) 
    plt.xlabel('words')
    plt.ylabel('counts')
    plt.show()

#(manipulate) stop words 
from nltk.corpus import stopwords
stop = list(stopwords.words('english'))
stop.extend('word1 word2 word3'.split())  

# Initialise the count vectorizer with the stop words
count_vectorizer = CountVectorizer(analyzer = 'word',stop_words=set(stop))

# Fit and transform the processed titles
count_data = count_vectorizer.fit_transform(df['title']) #possibility to add ;df["body"]

# Visualise the 10 most common words
plot_10_most_common_words(count_data, count_vectorizer)

#LDA model training and results visualization

import warnings
warnings.simplefilter("ignore", DeprecationWarning)

# Load the LDA model from sk-learn
from sklearn.decomposition import LatentDirichletAllocation as LDA
 
# Helper function
def print_topics(model, count_vectorizer, n_top_words):
    words = count_vectorizer.get_feature_names()
    for topic_idx, topic in enumerate(model.components_):
        print("\nTopic #%d:" % topic_idx)
        print(" ".join([words[i]
                        for i in topic.argsort()[:-n_top_words - 1:-1]]))
        
# Tweak the two parameters below
number_topics = 5
number_words = 10

# Create and fit the LDA model
lda = LDA(n_components=number_topics, n_jobs=-1)
lda.fit(count_data)

#save model
import pickle 

pkl_filename = "pickle_model.pkl"
with open(pkl_filename, 'wb') as file:
    pickle.dump(lda, file)

# Print the topics found by the LDA model
print("Topics found via LDA:")
print_topics(lda, count_vectorizer, number_words)

#Understand and interpret topics
%time
from pyLDAvis import sklearn as sklearn_lda
import pyLDAvis

LDAvis_data_filepath = "pickle_model" + str(number_topics)

if 1 == 1:
    LDAvis_prepared = sklearn_lda.prepare(lda, count_data, count_vectorizer)
with open(LDAvis_data_filepath, "wb") as f:
    pickle.dump(LDAvis_prepared, f)
        
# load the pre-prepared pyLDAvis data from disk
with open(LDAvis_data_filepath, "rb") as f:
    LDAvis_prepared = pickle.load(f)

pyLDAvis.save_html(LDAvis_prepared, "pickle_model" + str(number_topics) +'.html')
